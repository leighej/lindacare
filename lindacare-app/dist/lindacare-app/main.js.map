{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/service/trade.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<p-panel header=\\\"Lindacare Test App\\\">\\n    <div>\\n      <h4>Filter by User ID</h4>\\n      <p-dropdown [options]=\\\"users\\\" [(ngModel)]=\\\"selectedUser\\\" (onChange)=\\\"changeUser()\\\"></p-dropdown>\\n    </div>\\n    <br/>\\n    <p-table [value]=\\\"trades\\\" sortField=\\\"timePlaced\\\" [paginator]=\\\"true\\\" [rowsPerPageOptions]=\\\"[5, 10, 20, 25, 30, 40, 50]\\\" [rows]=\\\"10\\\">\\n        <ng-template pTemplate=\\\"header\\\">\\n            <tr>\\n                <th *ngFor=\\\"let col of cols\\\" [pSortableColumn]=\\\"col.field\\\">\\n                    {{col.header}}\\n                    <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-trade>\\n            <tr>\\n                <td *ngFor=\\\"let col of cols\\\">\\n                        {{trade[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template><ng-template pTemplate=\\\"emptymessage\\\" let-columns>\\n            <tr>\\n                <td [attr.colspan]=\\\"cols.length\\\">\\n                    No records found\\n                </td>\\n            </tr>\\n        </ng-template>\\n\\n    </p-table>\\n    <div *ngIf=\\\"trades !== undefined && trades.length > 0\\\" style=\\\"padding-top: 25px;\\\">\\n      <p-chart type=\\\"line\\\" [data]=\\\"data\\\" height=\\\"500\\\" width=\\\"500\\\"></p-chart>\\n    </div>\\n</p-panel>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { TradeService } from './service/trade.service';\nimport { Trade } from './domain/trade';\nimport { User } from './domain/user';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'app';\n  trades: Trade[];\n  users: User[];\n  selectedUser: String;\n  cols: any[];\n  data: any;\n\n\n  constructor(private tradeService: TradeService) {\n    // Columns for the table\n    this.cols = [\n      { field: 'userId', header: 'User ID' },\n      { field: 'currencyFrom', header: 'Currency From' },\n      { field: 'currencyTo', header: 'Currency To' },\n      { field: 'amountBuy', header: 'Amount Bought' },\n      { field: 'amountSell', header: 'Amount Sold' },\n      { field: 'rate', header: 'Rate' },\n      { field: 'timePlaced', header: 'Date' },\n      { field: 'originatingCountry', header: 'Country of Origin' },\n\n    ];\n\n    this.users = [{ label: 'All', value: 'ALL'}];\n\n  }\n  ngOnInit() {\n    this.getAllTrades();\n    this.tradeService.getUsers().subscribe(users => {\n      // console.log(users);\n      for (const user of users) {\n        this.users.push({label: user, value: user});\n      }\n\n\n    });\n  }\n\n  /**\n   * User changed in the dropdown list\n   */\n  changeUser() {\n    if (this.selectedUser === 'ALL') {\n      this.getAllTrades();\n    } else {\n      this.getTradesByUser(this.selectedUser);\n    }\n  }\n  /**\n   * Get all the trades\n   */\n  private getAllTrades() {\n    this.tradeService.getTrades().subscribe(trades => {\n      // console.log(trades);\n      this.trades = trades;\n      this.processChartData();\n    });\n  }\n\n  /**\n   * Get all the trades by userid\n   * @param userId - The user id of the trades you want\n   */\n  private getTradesByUser(userId: String) {\n    this.tradeService.getTradesByUserId(userId).subscribe(trades => {\n      // console.log(trades);\n      this.trades = trades;\n      this.processChartData();\n    });\n  }\n\n  private processChartData() {\n    const labels = [];\n    const data = [];\n\n    for (const trade of this.trades) {\n      labels.push(trade.timePlaced);\n      data.push(trade.amountSell);\n    }\n    this.data = {\n      labels: labels,\n      datasets: [\n          {\n              label: 'Trades',\n              data: data,\n              fill: false,\n              borderColor: '#4bc0c0'\n          }\n      ]\n    };\n\n  }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ChartModule } from 'primeng/chart';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { PanelModule } from 'primeng/panel';\nimport { TableModule } from 'primeng/table';\nimport { AppComponent } from './app.component';\nimport { TradeService } from './service/trade.service';\nimport { FormsModule } from '@angular/forms';\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    PanelModule,\n    TableModule,\n    HttpClientModule,\n    ChartModule,\n    DropdownModule,\n    FormsModule\n  ],\n  providers: [\n    TradeService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Trade } from '../domain/trade';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class TradeService {\r\n\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    /**\r\n     * Get all the trades\r\n     */\r\n    getTrades(): Observable<Trade[]> {\r\n        return this.http.get<Trade[]>('/trades');\r\n    }\r\n\r\n    /**\r\n     * Get all the trades by a user\r\n     */\r\n    getTradesByUserId(userId: String): Observable<Trade[]> {\r\n      return this.http.get<Trade[]>('/trades/' + userId);\r\n  }\r\n\r\n    /**\r\n     * Get the list of users that have traded\r\n     */\r\n    getUsers(): Observable<String[]> {\r\n      return this.http.get<String[]>('/users');\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}